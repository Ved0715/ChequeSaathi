// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")      // Pooled connection for app
  directUrl = env("DIRECT_URL")        // Direct connection for migrations
}

// User Model for Authentication (MVP - No roles, all users have same access)
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (Audit trail - track who created/updated records)
  customersCreated      Customer[]        @relation("CustomerCreatedBy")
  customersUpdated      Customer[]        @relation("CustomerUpdatedBy")
  chequesCreated        Cheque[]          @relation("ChequeCreatedBy")
  chequesUpdated        Cheque[]          @relation("ChequeUpdatedBy")
  transactionsCreated   CashTransaction[] @relation("TransactionCreatedBy")
  transactionsUpdated   CashTransaction[] @relation("TransactionUpdatedBy")

  @@map("users")
}

// Customer Model
model Customer {
  id              String    @id @default(uuid())
  name            String
  email           String?
  phone           String
  address         String?
  businessName    String?
  riskScore       Int       @default(0) // 0-100 scale, calculated periodically
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Audit fields
  createdById     String?
  createdBy       User?     @relation("CustomerCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById     String?
  updatedBy       User?     @relation("CustomerUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  // Relations
  cheques         Cheque[]
  transactions    CashTransaction[]

  @@index([phone])
  @@index([deletedAt])
  @@map("customers")
}

// Cheque Model
model Cheque {
  id              String        @id @default(uuid())
  chequeNumber    String
  amount          Float
  issueDate       DateTime      // Date when cheque was written
  dueDate         DateTime      // Date when cheque should be deposited/cleared

  // Bank details
  bankName        String
  branchName      String?
  ifscCode        String?

  // Drawer details (person/company who wrote the cheque)
  drawerName      String

  // Payee/Beneficiary
  payeeName       String?

  // Cheque type and direction
  chequeType      ChequeType    @default(AT_SIGHT)
  direction       ChequeDirection @default(RECEIVABLE)

  // Status tracking
  status          ChequeStatus  @default(RECEIVED)
  depositDate     DateTime?
  clearedDate     DateTime?
  bouncedDate     DateTime?
  bounceReason    String?

  // Additional info
  imageUrl        String?
  notes           String?

  // Relations
  customerId      String
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Audit fields
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  createdById     String?
  createdBy       User?         @relation("ChequeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById     String?
  updatedBy       User?         @relation("ChequeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@unique([customerId, chequeNumber])
  @@index([customerId])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
  @@index([depositDate])
  @@index([deletedAt])
  @@map("cheques")
}

enum ChequeStatus {
  RECEIVED
  DEPOSITED
  CLEARED
  BOUNCED
}

enum ChequeType {
  AT_SIGHT      // Regular cheque
  POST_DATED    // PDC - Post Dated Cheque
}

enum ChequeDirection {
  RECEIVABLE    // We receive payment (customer pays us)
  PAYABLE       // We make payment (we pay customer)
}

// Cash Transaction Model
model CashTransaction {
  id              String              @id @default(uuid())
  amount          Float
  type            TransactionType
  date            DateTime
  paymentMethod   PaymentMethod       @default(CASH)
  category        String?             // e.g., "Advance", "Settlement", "Refund"
  reference       String?             // Transaction ID, receipt number, etc.
  notes           String?

  // Relations
  customerId      String
  customer        Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Audit fields
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?

  createdById     String?
  createdBy       User?               @relation("TransactionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById     String?
  updatedBy       User?               @relation("TransactionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([customerId])
  @@index([date])
  @@index([deletedAt])
  @@map("cash_transactions")
}

enum TransactionType {
  CREDIT        // Money received from customer
  DEBIT         // Money paid to customer
}

enum PaymentMethod {
  CASH
  UPI
  NEFT
  RTGS
  IMPS
  CARD
  OTHER
}
